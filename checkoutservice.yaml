apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
    meta.helm.sh/release-name: my-otel-demo
    meta.helm.sh/release-namespace: otel-demo
  creationTimestamp: "2023-09-06T13:18:28Z"
  generation: 1
  labels:
    tags.datadoghq.com/env: otel-demo
    tags.datadoghq.com/service: checkoutservice
    tags.datadoghq.com/version: 1.4.0   
    app.kubernetes.io/component: checkoutservice
    app.kubernetes.io/instance: my-otel-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: my-otel-demo-checkoutservice
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 1.4.0
    helm.sh/chart: opentelemetry-demo-0.23.0
    opentelemetry.io/name: my-otel-demo-checkoutservice
  name: my-otel-demo-checkoutservice
  namespace: otel-demo
  resourceVersion: "27294637"
  uid: 0a208c3b-682d-4ca2-ad5b-5e2c3fbb342a
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      opentelemetry.io/name: my-otel-demo-checkoutservice
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        tags.datadoghq.com/env: otel-demo
        tags.datadoghq.com/service: checkoutservice
        tags.datadoghq.com/version: 1.4.0       
        app.kubernetes.io/component: checkoutservice
        app.kubernetes.io/instance: my-otel-demo
        app.kubernetes.io/name: my-otel-demo-checkoutservice
        opentelemetry.io/name: my-otel-demo-checkoutservice
    spec:
      containers:
      - env:
        - name: OTEL_SERVICE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.labels['app.kubernetes.io/component']
        - name: HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "http://$(HOST_IP):4317"      
        - name: OTEL_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: OTEL_K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: OTEL_K8S_POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: OTEL_K8S_POD_UID
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.uid
        - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
          value: cumulative
        - name: CHECKOUT_SERVICE_PORT
          value: "8080"
        - name: CART_SERVICE_ADDR
          value: my-otel-demo-cartservice:8080
        - name: CURRENCY_SERVICE_ADDR
          value: my-otel-demo-currencyservice:8080
        - name: EMAIL_SERVICE_ADDR
          value: http://my-otel-demo-emailservice:8080
        - name: PAYMENT_SERVICE_ADDR
          value: my-otel-demo-paymentservice:8080
        - name: PRODUCT_CATALOG_SERVICE_ADDR
          value: my-otel-demo-productcatalogservice:8080
        - name: SHIPPING_SERVICE_ADDR
          value: my-otel-demo-shippingservice:8080
        - name: KAFKA_SERVICE_ADDR
          value: my-otel-demo-kafka:9092
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=opentelemetry-demo,k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME),deployment.environment=otel-demo,service.version=1.4.0
        image: ghcr.io/open-telemetry/demo:1.4.0-checkoutservice
        imagePullPolicy: IfNotPresent
        name: checkoutservice
        ports:
        - containerPort: 8080
          name: service
          protocol: TCP
        resources:
          limits:
            memory: 20Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      initContainers:
      - command:
        - sh
        - -c
        - until nc -z -v -w30 my-otel-demo-kafka 9092; do echo waiting for kafka;
          sleep 2; done;
        image: busybox:latest
        imagePullPolicy: Always
        name: wait-for-kafka
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: my-otel-demo

